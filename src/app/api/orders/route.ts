import { cookies } from "next/headers";
import { NextResponse } from "next/server";
import prisma from "@/lib/prisma";
import { sendEmail } from "@/lib/mailer";
import { orderStatusTemplate, adminOrderTemplate } from "@/lib/emailTemplates";

export async function POST(req: Request) {
  try {
    const body = await req.json();
    const { products, total } = body; // products: [{ id | productId, quantity }, ...]

    const c = await cookies();
    const email = c.get("userEmail")?.value;

    if (!email) {
      return NextResponse.json({ error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç" }, { status: 401 });
    }

    const user = await prisma.user.findUnique({
      where: { email },
    });

    if (!user) {
      return NextResponse.json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" }, { status: 404 });
    }

    // üîí —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏ ‚Üí —Å–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ ‚Üí —É–º–µ–Ω—å—à–∞–µ–º —Å–∫–ª–∞–¥
    const order = await prisma.$transaction(async (tx) => {
      // 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
      for (const it of products) {
        const productId = Number(it.productId ?? it.id); // üëà –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±–æ–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        const qty = Number(it.quantity ?? 1);

        if (!productId || qty <= 0) continue;

        const product = await tx.product.findUnique({
          where: { id: productId },
          select: { stock: true, name: true },
        });

        if (!product || product.stock < qty) {
          throw new Error(
            `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ "${product?.name ?? productId}". –û—Å—Ç–∞—Ç–æ–∫: ${product?.stock ?? 0}`
          );
        }
      }

      // 2Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑
      const created = await tx.order.create({
        data: {
          userId: user.id,
          products,
          total,
          status: "NEW",
        },
        include: { user: true },
      });

      // 3Ô∏è‚É£ –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã (—É–º–µ–Ω—å—à–∞–µ–º stock)
      for (const it of products) {
        const productId = Number(it.productId ?? it.id);
        const qty = Number(it.quantity ?? 1);

        if (!productId || qty <= 0) continue;

        await tx.product.update({
          where: { id: productId },
          data: { stock: { decrement: qty } },
        });
      }

      return created;
    });

    // ‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–∞ (–µ—Å–ª–∏ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ)
    if (!process.env["DISABLE_EMAILS"]) {
      // –ø–∏—Å—å–º–æ –∫–ª–∏–µ–Ω—Ç—É
      if (order.user?.email) {
        await sendEmail(
          order.user.email,
          `–í–∞—à –∑–∞–∫–∞–∑ #${order.id} –ø—Ä–∏–Ω—è—Ç`,
          orderStatusTemplate(order.id, "NEW")
        );
      }

      // –ø–∏—Å—å–º–æ –∞–¥–º–∏–Ω—É
      await sendEmail(
        process.env["EMAIL_USER"]!,
        `–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${order.id}`,
        adminOrderTemplate(order, "NEW")
      );
    } else {
      console.log("üì≠ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∞ (DISABLE_EMAILS=true)");
    }

    return NextResponse.json(order);
  } catch (e: any) {
    console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:", e);
    return NextResponse.json({ error: e.message || "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞" }, { status: 500 });
  }
}
