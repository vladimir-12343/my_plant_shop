// src/app/api/orders/route.ts
import { NextResponse } from "next/server"
import prisma from "@/lib/prisma"
import { sendEmail } from "@/lib/mailer"
import { orderStatusTemplate, adminOrderTemplate } from "@/lib/emailTemplates"

import { getServerSession } from "next-auth"
import { authOptions } from "@/lib/auth"

export const runtime = "nodejs" // bcrypt/–∫—É–∫–∏ ‚Äî –Ω–∞ Node, –Ω–µ edge

export async function POST(req: Request) {
  try {
    const session = await getServerSession(authOptions)
    if (!session?.user?.email) {
      return NextResponse.json({ error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç" }, { status: 401 })
    }

    const body = await req.json()
    const { products, total } = body

    const user = await prisma.user.findUnique({
      where: { email: session.user.email },
    })
    if (!user) {
      return NextResponse.json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" }, { status: 404 })
    }

    const order = await prisma.$transaction(async (tx) => {
      // 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
      for (const it of products as Array<any>) {
        const productId = Number(it.productId ?? it.id)
        const qty = Number(it.quantity ?? 1)
        if (!productId || qty <= 0) continue

        const product = await tx.product.findUnique({
          where: { id: productId },
          select: { stock: true, name: true },
        })
        if (!product || product.stock < qty) {
          throw new Error(
            `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ "${product?.name ?? productId}". –û—Å—Ç–∞—Ç–æ–∫: ${product?.stock ?? 0}`
          )
        }
      }

      // 2) –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑
      const created = await tx.order.create({
        data: {
          userId: user.id,
          products,
          total,
          status: "NEW",
        },
        include: { user: true },
      })

      // 3) –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã
      for (const it of products as Array<any>) {
        const productId = Number(it.productId ?? it.id)
        const qty = Number(it.quantity ?? 1)
        if (!productId || qty <= 0) continue

        await tx.product.update({
          where: { id: productId },
          data: { stock: { decrement: qty } },
        })
      }

      return created
    })

    // –ü–∏—Å—å–º–∞
    if (!process.env["DISABLE_EMAILS"]) {
      if (order.user?.email) {
        await sendEmail(
          order.user.email,
          `–í–∞—à –∑–∞–∫–∞–∑ #${order.id} –ø—Ä–∏–Ω—è—Ç`,
          orderStatusTemplate(order.id, "NEW")
        )
      }
      await sendEmail(
        process.env["EMAIL_USER"]!,
        `–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${order.id}`,
        adminOrderTemplate(order, "NEW")
      )
    } else {
      console.log("üì≠ DISABLE_EMAILS=true ‚Äî –ø–∏—Å—å–º–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º")
    }

    return NextResponse.json(order)
  } catch (e: any) {
    console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:", e)
    return NextResponse.json({ error: e.message || "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞" }, { status: 500 })
  }
}
